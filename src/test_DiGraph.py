from unittest import TestCase

from src.DiGraph import DiGraph
from src.Edge import Edge
from src.Node import Node
from src.location import location


class TestDiGraph(TestCase):
    def test_v_size(self):
      z=("1,1,0")
      y=("2,2,0")
      x=("3,3,0")
      w=("4,4,0")
      g=DiGraph()
      g.add_node(1,z)
      g.add_node(2,y)
      g.add_node(3,x)
      g.add_node(4,w)
      self.assertTrue(g.v_size(),4)
      g.add_node(5,"7,8,0")
      self.assertTrue(g.v_size(), 5)

    def test_e_size(self):
        z = ("1,1,0")
        y = ("2,2,0")
        x = ("3,3,0")
        w = ("4,4,0")
        g = DiGraph()
        g.add_node(1, z)
        g.add_node(2, y)
        g.add_node(3, x)
        g.add_node(4, w)
        g.add_edge(3,2,7.55)
        g.add_edge(1,3,65)
        g.add_edge(1,4,75)
        self.assertTrue(g.e_size(),3)
        g.add_edge(4,1,31)
        self.assertTrue(g.e_size(),4)
        g.remove_edge(1,3)
        self.assertTrue(g.e_size(),3)

    def test_get_mc(self):
        z = ("1,1,0")
        y = ("2,2,0")
        x = ("3,3,0")
        w = ("4,4,0")
        g = DiGraph()
        g.add_node(1, z)
        g.add_node(2, y)
        g.add_node(3, x)
        g.add_node(4, w)
        g.add_edge(3, 2, 7.55)
        g.add_edge(1, 3, 65)
        g.add_edge(1, 4, 75)
        self.assertTrue(g.get_mc(), 7)
        g.add_edge(4, 1, 31)
        self.assertTrue(g.get_mc(), 8)
        g.remove_edge(1, 3)
        self.assertTrue(g.get_mc(), 9)

    def test_add_edge(self):
            z = ("1,1,0")
            y = ("2,2,0")
            x = ("3,3,0")
            w = ("4,4,0")
            g = DiGraph()
            g.add_node(1, z)
            g.add_node(2, y)
            g.add_node(3, x)
            g.add_node(4, w)
            g.add_edge(3, 2, 7.55)
            g.add_edge(1, 3, 65)
            g.add_edge(1, 4, 75)
            e=Edge(1,3,75)
            self.assertTrue(g.dicEdges[1,3], e)
            g.add_edge(4, 1, 31)
            a=Edge(4,1,31)
            self.assertTrue(g.dicEdges[4,1], a)
            g.add_edge(2,3,44)
            b=Edge(2,3,44)
            self.assertTrue(g.dicEdges[2,3], b)

    def test_add_node(self):
        z = ("1,1,0")
        y = ("2,2,0")
        x = ("3,3,0")
        w = ("4,4,0")
        g = DiGraph()
        g.add_node(1, z)
        g.add_node(2, y)
        g.add_node(3, x)
        g.add_node(4, w)
        self.assertTrue(g.dicNodes[2],Node(y,2))
        self.assertTrue(g.dicNodes[3], Node(x, 3))
        self.assertTrue(g.dicNodes[4], Node(w, 4))

    def test_remove_node(self):
        z = ("1,1,0")
        y = ("2,2,0")
        x = ("3,3,0")
        w = ("4,4,0")
        g = DiGraph()
        g.add_node(1, z)
        g.add_node(2, y)
        g.add_node(3, x)
        g.add_node(4, w)
        g.add_edge(3, 2, 7.55)
        g.add_edge(1, 3, 65)
        g.add_edge(1, 4, 75)
        g.remove_node(2)
        self.assertTrue(g.v_size(),3)
        self.assertTrue(g.e_size(), 2)
        g.remove_node(1)
        self.assertTrue(g.v_size(), 2)
        # self.assertTrue(g.e_size(), 0)

    def test_remove_edge(self):
        z = ("1,1,0")
        y = ("2,2,0")
        x = ("3,3,0")
        w = ("4,4,0")
        g = DiGraph()
        g.add_node(1, z)
        g.add_node(2, y)
        g.add_node(3, x)
        g.add_node(4, w)
        g.add_edge(3, 2, 7.55)
        g.add_edge(1, 3, 65)
        g.add_edge(1, 4, 75)
        self.assertTrue(g.e_size(), 3)
        g.remove_edge(3, 2)
        self.assertTrue(g.e_size(), 2)
        g.remove_edge(1,4)
        self.assertTrue(g.e_size(), 1)
